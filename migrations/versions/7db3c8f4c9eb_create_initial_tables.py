"""create initial tables

Revision ID: 7db3c8f4c9eb
Revises: 
Create Date: 2025-05-04 16:12:41.773420

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '7db3c8f4c9eb'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Course',
    sa.Column('CourseID', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('UnitCode', sa.String(length=20), nullable=False),
    sa.Column('CourseName', sa.String(length=100), nullable=False),
    sa.Column('CreditPoints', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('CourseID'),
    sa.UniqueConstraint('UnitCode')
    )
    op.create_table('Student',
    sa.Column('StudentID', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('FirstName', sa.Text(), nullable=False),
    sa.Column('LastName', sa.Text(), nullable=False),
    sa.Column('Email', sa.String(length=100), nullable=True),
    sa.Column('Password', sa.String(length=255), nullable=False),
    sa.Column('Otp_Code', sa.String(length=10), nullable=True),
    sa.Column('Otp_Expiry', sa.DateTime(), nullable=True),
    sa.Column('CreatedAt', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('StudentID'),
    sa.UniqueConstraint('Email')
    )
    op.create_table('Assignment',
    sa.Column('AssignmentID', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('CourseID', sa.Integer(), nullable=True),
    sa.Column('StudentID', sa.Integer(), nullable=True),
    sa.Column('AssignmentName', sa.Text(), nullable=False),
    sa.Column('FilePath', sa.Text(), nullable=False),
    sa.Column('HoursSpent', sa.Float(), nullable=True),
    sa.Column('Weight', sa.Float(), nullable=True),
    sa.Column('MarksAchieved', sa.Float(), nullable=True),
    sa.Column('MarksOutOf', sa.Float(), nullable=True),
    sa.Column('DueDate', sa.Date(), nullable=False),
    sa.CheckConstraint("FilePath LIKE '/secure_uploads/%/_%.%' AND length(substr(FilePath, 17, 64)) = 64 AND substr(FilePath, 17, 64) NOT LIKE '%/%' AND (substr(FilePath, -3, 3) = '.md' OR substr(FilePath, -4, 4) IN ('.pdf', '.txt') OR substr(FilePath, -5, 5) = '.docx')", name='assignment_filepath_check'),
    sa.CheckConstraint('MarksAchieved BETWEEN 0 AND MarksOutOf', name='assignment_marksachieved_check'),
    sa.CheckConstraint('MarksOutOf > 0', name='assignment_marksoutof_check'),
    sa.CheckConstraint('Weight BETWEEN 0 AND 100', name='assignment_weight_check'),
    sa.ForeignKeyConstraint(['CourseID'], ['Course.CourseID'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['StudentID'], ['Student.StudentID'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('AssignmentID')
    )
    op.create_table('Notes',
    sa.Column('NoteID', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('StudentID', sa.Integer(), nullable=False),
    sa.Column('CourseID', sa.Integer(), nullable=True),
    sa.Column('Title', sa.Text(), nullable=True),
    sa.Column('Category', sa.Text(), nullable=True),
    sa.Column('Description', sa.Text(), nullable=True),
    sa.Column('FilePath', sa.Text(), nullable=False),
    sa.Column('CreatedAt', sa.DateTime(), nullable=True),
    sa.CheckConstraint("Category IN ('Lecture', 'Tutorial', 'Lab', 'Exam', 'Other')", name='notes_category_check'),
    sa.CheckConstraint("FilePath LIKE '/secure_notes/%/_%.%' AND length(substr(FilePath, 15, 64)) = 64 AND substr(FilePath, 15, 64) NOT LIKE '%/%' AND (substr(FilePath, -3, 3) = '.md' OR substr(FilePath, -4, 4) IN ('.pdf', '.txt') OR substr(FilePath, -5, 5) = '.docx')", name='notes_filepath_check'),
    sa.ForeignKeyConstraint(['CourseID'], ['Course.CourseID'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['StudentID'], ['Student.StudentID'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('NoteID')
    )
    op.create_table('StudentCourse',
    sa.Column('StudentID', sa.Integer(), nullable=False),
    sa.Column('CourseID', sa.Integer(), nullable=False),
    sa.Column('EnrollmentDate', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['CourseID'], ['Course.CourseID'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['StudentID'], ['Student.StudentID'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('StudentID', 'CourseID')
    )
    op.create_table('Share',
    sa.Column('ShareID', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('NoteID', sa.Integer(), nullable=False),
    sa.Column('OwnerStudentID', sa.Integer(), nullable=False),
    sa.Column('AccesseeStudentID', sa.Integer(), nullable=False),
    sa.Column('EditPower', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['AccesseeStudentID'], ['Student.StudentID'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['NoteID'], ['Notes.NoteID'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['OwnerStudentID'], ['Student.StudentID'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('ShareID'),
    sa.UniqueConstraint('NoteID', 'AccesseeStudentID', name='share_unique_note_accessee')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Share')
    op.drop_table('StudentCourse')
    op.drop_table('Notes')
    op.drop_table('Assignment')
    op.drop_table('Student')
    op.drop_table('Course')
    # ### end Alembic commands ###
